"""
FastAPI Application for ReAct Agent with LangChain and OpenAI
-------------------------------------------------------------

This module sets up a FastAPI application to interact with the ReAct agent. The agent is designed to process user queries,
interact with an SQL database, and return coherent, context-aware responses. The FastAPI application exposes endpoints
for health checking and generating responses from the agent.

Structure
---------
- Imports: Necessary libraries and modules.
- Data Models: Pydantic models for request validation.
- FastAPI App: Initialization of the FastAPI application.
- Endpoints: API endpoints for health check and generating responses.

Usage
-----
1. Run the FastAPI server:
    ```sh
    fastapi dev main.py
    ```
2. Access the health check endpoint at:
    http://127.0.0.1:8000/healthcheck
3. Generate a response by sending a POST request to:
    http://127.0.0.1:8000/generate
    with a JSON payload containing the user query.

Example:
    ```sh
    curl -X POST http://0.0.0.0:8000/generate -H "Content-Type: application/json" -d '{"user_query": "Which assets Client_1 have a target allocation smaller than 40%?", "session_id": "123"}'
    ```

Dependencies
------------
- fastapi: The web framework for building APIs with Python.
- pydantic: Data validation and settings management using Python type annotations.

"""

from fastapi import FastAPI
from pydantic import BaseModel

from src.agent import agent


class GenerationRequest(BaseModel):
    """
    Data model for the generation request payload.

    Attributes:
        user_query (str): The user's query to be processed by the agent.
        session_id (str): The session ID for the conversation.
    """

    user_query: str
    session_id: str


app = FastAPI()


@app.get("/healthcheck")
async def healthcheck():
    """
    Health check endpoint to verify if the API is running.

    Returns:
        dict: A dictionary indicating the status of the API.
    """
    return {"status": "ok"}


@app.post("/generate")
async def generate(gen_req: GenerationRequest):
    """
    Endpoint to generate a response from the agent based on the user's query.

    Args:
        gen_req (GenerationRequest): The request payload containing the user's query.

    Returns:
        dict: The response generated by the agent.
    """
    response = agent.invoke(
        {
            "input": gen_req.user_query,
        },
        {"configurable": {"session_id": gen_req.session_id}},
    )
    return response["output"]
